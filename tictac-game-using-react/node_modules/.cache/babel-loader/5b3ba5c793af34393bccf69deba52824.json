{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\fahad\\\\OneDrive\\\\Desktop\\\\plagarism\\\\tictac-game-using-react\\\\src\\\\App.js\";\nimport './App.css';\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  const str1 = \"Unique words are words that are not repeated in a given text or set of texts. They are words that appear only once in a particular context, and can be useful for various linguistic analyses such as vocabulary assessment, authorship attribution, and text classification.\\\r\n  \";\n  const str2 = \"Unique words are words that are not repeated in a given text or set of texts. They are words that appear only once in a particular context, and can be useful for various linguistic analyses such as vocabulary assessment, authorship attribution, and text classification.\";\n  const total_word = str2.split(\" \").length; //split the string into array of words\n\n  const str1_word_count = str1.split(\" \").length; //split the string into array of words\n  //split the string into array of words\n\n  const str2ArrDOC = str2.split(/[.!?]+/);\n  let matchedWord = [[]];\n  let plagarismcount = 0;\n\n  for (let i = 0; i < str2ArrDOC.length; i++) {\n    let str2Arr = str2ArrDOC[i].split(/[\\s,]+/);\n    let str1ArrDoc = str1.split(/[.!?]+/);\n\n    if (str2Arr[i] != null && str2Arr[i + 1] != null && str2Arr[i + 2] != null && str2Arr[i + 3] != null) {\n      for (let j = 0; j < str1ArrDoc.length; j++) {\n        let str1ArrDocSplit = str1ArrDoc[j].split(/[\\s,]+/); // console.log(\"str1 splitted:    \"+str1ArrDocSplit)\n\n        if (str1ArrDocSplit[j] != null && str1ArrDocSplit[j + 1] != null && str1ArrDocSplit[j + 2] != null && str1ArrDocSplit[j + 3] != null) {\n          console.log(\"----------------------------------------------------------------------------------------------------\");\n          console.log(str2Arr[i] + \" \" + str2Arr[i + 1] + \" \" + str2Arr[i + 2] + \" \" + str2Arr[i + 3]);\n          console.log(\"Comparing to :\");\n          console.log(str1ArrDocSplit[j] + \" \" + str1ArrDocSplit[j + 1] + \" \" + str1ArrDocSplit[j + 2] + \" \" + str1ArrDocSplit[j + 3]);\n          console.log(\"----------------------------------------------------------------------------------------------------\");\n\n          if (str2Arr[i] == str1ArrDocSplit[j] && str2Arr[i + 1] == str1ArrDocSplit[j + 1] && str2Arr[i + 2] == str1ArrDocSplit[j + 2] && str2Arr[i + 3] == str1ArrDocSplit[j + 3]) {\n            // console.log(str2Arr[i] + \"   Matched\")\n            matchedWord.push(str2Arr[i]);\n            matchedWord.push(str2Arr[i + 1]);\n            matchedWord.push(str2Arr[i + 2]);\n            matchedWord.push(str2Arr[i + 3]);\n            plagarismcount += 4;\n          }\n        } else {// console.log(str2Arr[i] + \"   Not Matched\")\n        }\n      }\n    } //console.log(str2Arr)\n\n\n    console.log(\"Matched Word: \" + matchedWord);\n    console.log(\"Plagarism Count: \" + plagarismcount);\n    console.log(\"Total Word: \" + total_word);\n    console.log(\"str1 words : \" + str1_word_count);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n}\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","App","str1","str2","total_word","split","length","str1_word_count","str2ArrDOC","matchedWord","plagarismcount","i","str2Arr","str1ArrDoc","j","str1ArrDocSplit","console","log","push"],"sources":["C:/Users/fahad/OneDrive/Desktop/plagarism/tictac-game-using-react/src/App.js"],"sourcesContent":["import './App.css';\r\nimport React, { useEffect, useState } from 'react';\r\n\r\n\r\n\r\nfunction App() {\r\n  const str1 = \"Unique words are words that are not repeated in a given text or set of texts. They are words that appear only once in a particular context, and can be useful for various linguistic analyses such as vocabulary assessment, authorship attribution, and text classification.\\\r\n  \"\r\n  const str2 = \"Unique words are words that are not repeated in a given text or set of texts. They are words that appear only once in a particular context, and can be useful for various linguistic analyses such as vocabulary assessment, authorship attribution, and text classification.\"\r\n\r\n  const total_word = str2.split(\" \").length; //split the string into array of words\r\n\r\n  const str1_word_count = str1.split(\" \").length; //split the string into array of words\r\n\r\n  //split the string into array of words\r\n  const str2ArrDOC = str2.split(/[.!?]+/)\r\n  let matchedWord = [[]];\r\n  let plagarismcount = 0;\r\n\r\n  for(let i=0; i<str2ArrDOC.length; i++){\r\n    let str2Arr = str2ArrDOC[i].split(/[\\s,]+/)\r\n    let str1ArrDoc = str1.split(/[.!?]+/)\r\n    if(str2Arr[i]!= null && str2Arr[i+1]!= null && str2Arr[i+2]!= null && str2Arr[i+3]!= null){\r\n\r\n      for (let j=0;j<str1ArrDoc.length;j++){\r\n        let str1ArrDocSplit = str1ArrDoc[j].split(/[\\s,]+/)\r\n        // console.log(\"str1 splitted:    \"+str1ArrDocSplit)\r\n        if(str1ArrDocSplit[j]!= null && str1ArrDocSplit[j+1]!= null && str1ArrDocSplit[j+2]!= null && str1ArrDocSplit[j+3]!= null){\r\n          console.log(\"----------------------------------------------------------------------------------------------------\")\r\n          console.log(str2Arr[i] + \" \" + str2Arr[i+1] + \" \" + str2Arr[i+2] + \" \" + str2Arr[i+3])\r\n          console.log(\"Comparing to :\")\r\n          console.log(str1ArrDocSplit[j] + \" \" + str1ArrDocSplit[j+1] + \" \" + str1ArrDocSplit[j+2] + \" \" + str1ArrDocSplit[j+3])\r\n          console.log(\"----------------------------------------------------------------------------------------------------\")\r\n          if(str2Arr[i] == str1ArrDocSplit[j] && str2Arr[i+1] == str1ArrDocSplit[j+1] && str2Arr[i+2] == str1ArrDocSplit[j+2] && str2Arr[i+3] == str1ArrDocSplit[j+3]){\r\n            // console.log(str2Arr[i] + \"   Matched\")\r\n            matchedWord.push(str2Arr[i])\r\n            matchedWord.push(str2Arr[i+1])\r\n            matchedWord.push(str2Arr[i+2])\r\n            matchedWord.push(str2Arr[i+3])\r\n            plagarismcount += 4\r\n          }\r\n        }\r\n        else{\r\n          // console.log(str2Arr[i] + \"   Not Matched\")\r\n        }\r\n      }\r\n    }\r\n    //console.log(str2Arr)\r\n    console.log(\"Matched Word: \"+matchedWord)\r\n    console.log(\"Plagarism Count: \"+plagarismcount)\r\n    console.log(\"Total Word: \"+total_word)\r\n    console.log(\"str1 words : \"+ str1_word_count)\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}